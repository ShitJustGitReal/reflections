How did viewing a diff between two versions of a file help you see the bug that 
was introduced?



If the old version was working and the new version did not, the not working part must be located within the differences between the old and the new version.

How could having easy access to the entire history of a file make you a more
 efficient programmer in the long term?



One can always check what was done way back. See the sequence of things. What was done by whom.  



What do you think are the pros and cons of manually choosing when to create a 
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

When you save manually you can make sure each each save represents a logical change, which makes it a lot easier to look back what was changed and when. 

- Unrelated changes should be committed separately
- Parts of your code that do a separate thing of a whole functionality should also be committed separately. 



Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?



Because for important changes often multiple interrelated files need to be edited. And when reviewing the commits/changes later, you want to see all what was changed/added to have a certain effect.



How can you use the commands git log and git diff to view the history of files?



git log --stat is great for getting an overview what was changed when and how many files and lines of code were involved. To check the details of the changes between specific versions, we can use git diff 'older-version-id' 'newer-version-id'



How might using version control make you more confident to make changes that
 could break something?



We can always go back to restore a stable version without having to be afraid of losing the new feature, so why not try to make things better?

Now that you have your workspace set up, what do you want to try using Git for?

I want to use it to participate in projects at work. It's a different versioning control system (SVN), but understanding the concept will probably help. Besides, we will probably upgrade to Git in the future.